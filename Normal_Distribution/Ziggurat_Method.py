import math
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
from matplotlib.pyplot import plot, scatter
import matplotlib.pyplot as plt
import scipy.stats
from scipy.stats import kstest, norm
# X = [3.42493936, 3.20572556, 3.06814455, 2.9655791, 2.88282773, 2.81292558,
#      2.75207325, 2.69795986, 2.64907049, 2.60435582, 2.56305768, 2.52460968,
#      2.48857701, 2.45461827, 2.42246027, 2.39188082, 2.36269664, 2.3347547,
#      2.30792582, 2.28209989, 2.25718228, 2.23309097, 2.20975443, 2.18710983,
#      2.16510167, 2.14368069, 2.12280289, 2.10242885, 2.08252305, 2.06305339,
#      2.04399072, 2.02530852, 2.00698252, 1.98899049, 1.97131199, 1.95392817,
#      1.93682158, 1.91997608, 1.90337662, 1.88700921, 1.87086078, 1.85491907,
#      1.83917261, 1.82361058, 1.80822281, 1.79299968, 1.77793209, 1.7630114,
#      1.74822941, 1.73357832, 1.71905066, 1.70463931, 1.69033744, 1.67613848,
#      1.66203612, 1.64802428, 1.63409709, 1.62024883, 1.606474, 1.59276721,
#      1.57912322, 1.56553693, 1.55200331, 1.53851744, 1.5250745, 1.5116697,
#      1.49829833, 1.48495571, 1.4716372, 1.45833818, 1.44505402, 1.4317801,
#      1.41851178, 1.40524439, 1.39197321, 1.37869347, 1.36540034, 1.35208889,
#      1.33875411, 1.32539086, 1.31199387, 1.29855774, 1.28507687, 1.27154548,
#      1.25795761, 1.244307, 1.23058718, 1.21679136, 1.2029124, 1.18894282,
#      1.17487473, 1.16069976, 1.14640905, 1.13199315, 1.117442, 1.1027448,
#      1.08788994, 1.07286493, 1.05765624, 1.04224916, 1.02662767, 1.01077424,
#      0.99466959, 0.97829244, 0.96161918, 0.94462346, 0.92727576, 0.90954279,
#      0.89138674, 0.8727644, 0.85362597, 0.83391361, 0.81355943, 0.79248295,
#      0.77058752, 0.74775549, 0.72384124, 0.69866102, 0.67197764, 0.64347606,
#      0.61272297, 0.57909462, 0.54163655, 0.4987553, 0.44740181, 0.38005645,
#      0.2505254, 0.]
# Y = [0.00113169, 0.00234077, 0.00360406, 0.00491105, 0.00625555, 0.00763346,
#      0.00904184, 0.01047847, 0.01194162, 0.01342988, 0.01494212, 0.0164774,
#      0.0180349, 0.01961396, 0.02121397, 0.02283444, 0.02447492, 0.02613504,
#      0.02781446, 0.02951288, 0.03123005, 0.03296575, 0.03471978, 0.03649196,
#      0.03828216, 0.04009026, 0.04191613, 0.0437597, 0.04562089, 0.04749964,
#      0.04939591, 0.05130968, 0.05324092, 0.05518963, 0.05715582, 0.0591395,
#      0.0611407, 0.06315946, 0.06519583, 0.06724985, 0.06932161, 0.07141117,
#      0.07351863, 0.07564406, 0.07778759, 0.07994931, 0.08212935, 0.08432785,
#      0.08654493, 0.08878075, 0.09103546, 0.09330924, 0.09560226, 0.0979147,
#      0.10024676, 0.10259864, 0.10497058, 0.10736278, 0.1097755, 0.11220898,
#      0.11466349, 0.1171393, 0.1196367, 0.12215598, 0.12469748, 0.12726151,
#      0.12984842, 0.13245858, 0.13509236, 0.13775016, 0.14043239, 0.14313949,
#      0.14587191, 0.14863013, 0.15141464, 0.15422598, 0.15706468, 0.15993133,
#      0.16282654, 0.16575094, 0.16870519, 0.17169002, 0.17470616, 0.17775439,
#      0.18083555, 0.18395052, 0.18710021, 0.19028561, 0.19350776, 0.19676777,
#      0.20006682, 0.20340616, 0.20678713, 0.21021115, 0.21367976, 0.21719459,
#      0.22075743, 0.22437015, 0.22803483, 0.23175368, 0.23552912, 0.23936377,
#      0.24326051, 0.24722249, 0.25125316, 0.25535635, 0.2595363, 0.26379775,
#      0.26814599, 0.27258702, 0.27712761, 0.28177554, 0.28653975, 0.29143067,
#      0.29646056, 0.30164403, 0.30699875, 0.31254646, 0.31831446, 0.32433795,
#      0.33066376, 0.33735691, 0.34451295, 0.35228423, 0.36094751, 0.37114592,
#      0.38661728, 0.39894228]

#____________________________________________________________________

X=[3.90132880672133, 3.560762842616585, 3.3936205065222564, 3.2796953207313733, 3.1922156678501143,
3.1206867296892935, 3.0598767641676496, 3.0067889861741, 2.959541991951563, 2.916874823767948,
2.8778998315467144, 2.8419677709111526, 2.808588962432918, 2.7773846510959426, 2.7480556460103442,
2.7203613478519824, 2.694105283187122, 2.6691248595245685, 2.6452839415278016, 2.6224673626945876,
2.6005767955761474, 2.579527595059268, 2.5592463512834898, 2.539668968511844, 2.5207391395414445,
2.502407121534686, 2.48462874432971, 2.467364600042872, 2.4505793754834735, 2.4342412981219623,
2.418321673128697, 2.402794494037911, 2.38763611337732, 2.3728249624776425, 2.3583413118783025,
2.344167065447634, 2.330285582662304, 2.3166815245322967, 2.303340719481706, 2.290250046151718,
2.277397330618051, 2.2647712559391877, 2.252361282295631, 2.240157576260852, 2.228150947974451,
2.2163327951773697, 2.2046950532256537, 2.1932301503294975, 2.1819309673729985, 2.170790801761152,
2.1598033348172834, 2.148962602318837, 2.1382629678143257, 2.127699098410878, 2.1172659427616574,
2.106958711016471, 2.0967728565281547, 2.0867040591324875, 2.0767482098411443, 2.0669013968060006,
2.0571598924294503, 2.047520141509605, 2.0379787503216424, 2.02853247654741, 2.0191782199748842,
2.0099130138974273, 2.0007340171501236, 1.9916385067269455, 1.9826238709282158, 1.9736876029928985,
1.9648272951747352, 1.9560406332252338, 1.947325391250064, 1.938679426908581, 1.930100676929022,
1.921587152914448, 1.9131369374167684, 1.9047481802582187, 1.89641909508148, 1.8881479561112806,
1.8799330951117894, 1.8717728985254571, 1.8636658047801546, 1.8556103017525587, 1.847604924376719,
1.8396482523876356, 1.8317389081904916, 1.8238755548469205, 1.8160568941703708, 1.8082816649232252,
1.8005486411089113, 1.7928566303527331, 1.785204472365628, 1.7775910374854769, 1.7700152252909873,
1.7624759632835223, 1.7549722056325798, 1.7475029319809265, 1.7400671463056652, 1.7326638758317705,
1.7252921699948587, 1.7179510994501772, 1.71063975512499, 1.7033572473117244, 1.6961027047994113,
1.6888752740411015, 1.6816741183550918, 1.6744984171579222, 1.667347365227226, 1.6602201719926342,
1.6531160608530349, 1.6460342685185843, 1.6389740443759602, 1.6319346498754275, 1.6249153579383613,
1.6179154523839463, 1.6109342273738345, 1.603970986873604, 1.5970250441299159, 1.5900957211623188,
1.5831823482686986, 1.5762842635434091, 1.5694008124071661, 1.5625313471478162, 1.5556752264711302,
1.5488318150608003, 1.542000483146841, 1.535180606081627, 1.5283715639228181, 1.5215727410224384,
1.514783525621399, 1.508003309448764, 1.501231487325071, 1.4944674567690315, 1.487710617606939,
1.4809603715841204, 1.4742161219777707, 1.4674772732105101, 1.460743230464001, 1.4540133992919615,
1.4472871852319058, 1.4405639934149326, 1.4338432281728715, 1.4271242926420928, 1.4204065883632597,
1.4136895148762934, 1.406972469309797, 1.4002548459641642, 1.3935360358875692, 1.3868154264440102,
1.3800924008725404, 1.3733663378367928, 1.3666366109638586, 1.3599025883715372, 1.3531636321829341,
1.3464190980273203, 1.3396683345261209, 1.332910682762829, 1.3261454757355786, 1.3193720377910343,
1.3125896840381739, 1.3057977197404516, 1.2989954396847347, 1.2921821275253, 1.285357055101062,
1.2785194817240817, 1.2716686534372648, 1.2648038022390151, 1.2579241452724403, 1.2510288839765353,
1.2441172031965713, 1.2371882702507064, 1.2302412339496065, 1.2232752235655997, 1.2162893477476244,
1.2092826933779086, 1.2022543243659929, 1.195203280375334, 1.1881285754773225, 1.1810291967270916,
1.1739041026550086, 1.1667522216671842, 1.159572450347736, 1.152363651654865, 1.1451246530020673,
1.1378542442149742, 1.1305511753533903, 1.1232141543870897, 1.1158418447127727, 1.1084328624983266,
1.1009857738390996, 1.0934990917092997, 1.0859712726898447, 1.078400713451962, 1.0707857469735762,
1.0631246384629514, 1.0554155809611578, 1.0476566905916542, 1.0398460014215354, 1.0319814598947676,
1.024060918792881, 1.0160821306730725, 1.0080427407273258, 0.9999402789988943, 0.9917721518841037,
0.9835356328377796, 0.9752278521894003, 0.9668457859640994, 0.9583862435875148, 0.9498458543358227,
0.9412210523716122, 0.9325080601819367, 0.9237028702061958, 0.9148012244075538, 0.9057985915012485,
0.8966901415050097, 0.8874707172191463, 0.8781348021744668, 0.8686764845023404, 0.8590894160793363,
0.8493667661745361, 0.839501168675019, 0.8294846617766878, 0.8193086187938047, 0.8089636684485108,
0.7984396026342574, 0.7877252691818113, 0.7768084465627576, 0.7656756967016404, 0.7543121910769212,
0.7427015039933524, 0.730825365192512, 0.7186633616751328, 0.7061925755090299, 0.6933871401539348,
0.6802176919495692, 0.6666506851294327, 0.652647526873602, 0.6381634716632282, 0.6231461885908296,
0.6075338764322972, 0.5912527409101784, 0.5742135521519013, 0.5563068415134726, 0.5373960258880104,
0.5173072657431739, 0.49581396438263264, 0.4726120413166397, 0.4472783579912422, 0.4191960194269207,
0.38740801235050315, 0.35029431835026265, 0.30472386375146715, 0.24307365398053682, 0.1324292063500561,
0]

Y=[0.0001976284584980237, 0.000704195498316722, 0.001259212687703024, 0.0018415655409999639, 0.0024441473029361686,
0.0030632422484575712, 0.0036965274052720765, 0.004342398052130569, 0.004999672172152836, 0.005667439208523567,
0.0063449741403885235, 0.00703168483244138, 0.007727077864413243, 0.008430735327792392, 0.009142298482791609,
0.009861455894268852, 0.010587934597747237, 0.011321493377841494, 0.012061917557672575, 0.012809014893408424,
0.013562612292977054, 0.014322553160073193, 0.015088695219869542, 0.015860908720921957, 0.016639074934504623,
0.017423084891734764, 0.01821283831274014, 0.01900824269236443, 0.01980921251455687, 0.020615668573377786,
0.021427537382975658, 0.022244750662308927, 0.023067244883052323, 0.023894960871224735, 0.02472784345474099,
0.025565841150420692, 0.02640890588505932, 0.027256992746036397, 0.028110059757644388, 0.028968067679904765,
0.029830979827118118, 0.030698761903794176, 0.03157138185594059, 0.03244880973596789, 0.03333101757970314,
0.03421797929420314, 0.035109670555226985, 0.036006068713370774, 0.0369071527079909, 0.037812902988147414,
0.038723301439889904, 0.039638331319287436, 0.040557977190670995, 0.041482224869617786, 0.042411061370256575,
0.04334447485652014, 0.044282454597009115, 0.045224990923167285, 0.04617207519049833, 0.04712369974258181,
0.04807985787766953, 0.04904054381766534, 0.050005752679309644, 0.05097548044740751, 0.05194972394995371,
0.05292848083502193, 0.053911749549297276, 0.05489952931814196, 0.05589182012709407, 0.056888622704708035,
0.057889938506653284, 0.05889576970099471, 0.059906119154585366, 0.06092099042050749, 0.061940387726503364,
0.06296431596434258, 0.06399278068007658, 0.06502578806513536, 0.06606334494822547, 0.06710545878799112,
0.06815213766640407, 0.06920339028285037, 0.070259225948885, 0.07131965458362802, 0.07238468670977742,
0.07345433345021732, 0.07452860652520069, 0.07560751825008868, 0.07669108153362975, 0.0777793098767638,
0.07887221737193778, 0.0799698187029205, 0.08107212914510649, 0.0821791645662991, 0.08329094142796456,
0.08440747678695014, 0.08552878829766054, 0.08665489421468722, 0.08778581339588709, 0.08892156530590738,
0.09006217002015499, 0.09120764822920877, 0.0923580212436751, 0.09351331099948686, 0.09467354006364781,
0.09583873164042439, 0.09700890957798838, 0.09818409837551434, 0.09936432319073664, 0.10054960984797193,
0.10173998484661335, 0.10293547537010414, 0.10413610929539834, 0.1053419152029182, 0.10655292238701781,
0.10776916086696404, 0.10899066139844622, 0.11021745548562754, 0.1114495753937515, 0.1126870541623183,
0.11392992561884648, 0.11517822439323684, 0.11643198593275614, 0.11769124651765987, 0.1189560432774738,
0.120226414207956, 0.12150239818876196, 0.12278403500183686, 0.12407136535056011, 0.1253644308796699,
0.12666327419599552, 0.12796793889002797, 0.12927846955836098, 0.13059491182703575, 0.13191731237582582,
0.13324571896349888, 0.13458018045409653, 0.13592074684427335, 0.13726746929174033, 0.13862040014485988,
0.1399795929734422, 0.14134510260079622, 0.14271698513709044, 0.14409529801408366, 0.14548010002128758,
0.14687145134362797, 0.14826941360067505, 0.14967404988751704, 0.15108542481735665, 0.1525036045659137,
0.15392865691772353, 0.15536065131442534, 0.15679965890514078, 0.1582457525990499, 0.15969900712027763,
0.1611594990652112, 0.1626273069623777, 0.16410251133501766, 0.16558519476650146, 0.16707544196874305,
0.16857333985377707, 0.17007897760867713, 0.17159244677400318, 0.17311384132598084, 0.17464325776262907,
0.1761807951940666, 0.17772655543724664, 0.17928064311538386, 0.18084316576236018, 0.18241423393241443,
0.1839939613154453, 0.18558246485828073, 0.18717986489229477, 0.18878628526778124, 0.19040185349552624,
0.1920267008960564, 0.19366096275707734, 0.19530477849965946, 0.19695829185377242, 0.1986216510438216,
0.2002950089848928, 0.20197852349047335, 0.20367235749248305, 0.2053766792745223, 0.2070916627193248,
0.20881748757149196, 0.21055433971668366, 0.21230241147855014, 0.21406190193481014, 0.21583301725401471,
0.21761597105468589, 0.2194109847886863, 0.2212182881508601, 0.22303811951719557, 0.22487072641399014,
0.22671636602076106, 0.22857530570993762, 0.23044782362670027, 0.232334209312706, 0.2342347643778585,
0.23614980322475967, 0.2380796538310203, 0.24002465859522287, 0.24198517525303273, 0.2439615778707559,
0.24595425792456244, 0.24796362547465117, 0.2499901104448491, 0.25203416401954565, 0.2540962601714921,
0.2561768973358899, 0.2582766002483997, 0.26039592196728617, 0.2625354461029415, 0.2646957892816032,
0.2668776038742985, 0.2690815810270563, 0.2713084540343966, 0.27355900210524686, 0.2758340545790253,
0.2781344956600009, 0.2804612697506346, 0.2828153874799755, 0.2851979325420472, 0.28761006948244666,
0.29005305260030473, 0.2925282361689303, 0.29503708622401736, 0.29758119422609297, 0.30016229297781466,
0.30278227527209356, 0.3054432158711824, 0.3081473975801186, 0.31089734239485595, 0.3136958489970469,
0.31654603826438965, 0.319451409013151, 0.32241590695647276, 0.3254440109538131, 0.32854084220902346,
0.3317123044135013, 0.3349652663661513, 0.33830780408012107, 0.34174952811741344, 0.34530203626130684,
0.34897955617172033, 0.35279988640068216, 0.35678582614209514, 0.3609674474555821, 0.36538591427757605,
0.3701003783788383, 0.3752016786152212, 0.3808434617714188, 0.38732895509855814, 0.3954593491277625,0.39894228]

# print( 0.382323 +0.002/0.29172225)

#___________________________________________________________

exp = lambda x: np.exp(x, dtype=np.longdouble)
sqrt = lambda x: np.sqrt(x, dtype=np.longdouble)
power = lambda x, y: np.power(x, y, dtype=np.longdouble)
oneHalf = 1 / np.longdouble(2)
pi=3.1415926
P = lambda x: (1 / sqrt(2 * pi)) * exp(-x * x * oneHalf)

area = 0.5/253
# print(len(X))
# total = 0
# for i in range(1, len(X)):
#     print(X[i - 1] * (Y[i] - Y[i - 1]))
    # total = total + X[i - 1] * (Y[i] - Y[i - 1])
# # print(total)
# print(X[- 2] * (Y[-1] - Y[- 2]))
#
number_blocks=256

def TailGeneration(low):
    offset=0.25
    s=low-offset
    while True:
        unirandom1 = np.random.uniform()
        unirandom2 = np.random.uniform()
        x = np.sqrt(s*s - 2 * np.log(unirandom1))
        if unirandom2<s/x:
            break
    # return x
    if x > low:
        # x = x-offset
        # print(x)
        return x
    #
    # if x - offset > low:
    #     x = x-offset
    #     # print(x)
    #     return x
    else:
        return TailGeneration(low)






def Gaussian():
    # return TailGeneration(X[0])
    U1 = np.random.randint(number_blocks*2)
    is_negative = False
    if U1 // number_blocks > 0:
        is_negative = True
    U1 = U1 % number_blocks
    U2 = np.random.uniform()
    if U1 == 0:
        U3=np.random.uniform()
        if U3<0.4:
            if U3<0.025:
                Tailsampling = TailGeneration(X[0])
                    # print(Tailsampling)
                if is_negative:
                    return -1.0*Tailsampling
                else:
                    return Tailsampling
            else:
                if is_negative:
                    return -U2 *X[0]
                else:
                    return U2 *X[0]
        else:
            return Gaussian()
        # elif P(U2 * X[0]) > np.random.uniform() * (Y[U1]):
        #     if is_negative:
        #         return -U2 * X[0]
        #     else:
        #         return U2 * X[0]

        # else:


    elif U1 == number_blocks - 1:
        if np.random.uniform()<0.24:
            if P(U2 * X[U1 - 1])-Y[U1-1] > np.random.uniform() * (Y[U1]-Y[U1-1]):
                if is_negative:
                    return -U2 * X[U1 - 1]
                else:
                    return U2 * X[U1 - 1]
            else:
                return Gaussian()
        else:
            return Gaussian()
    else:
        if U2 < X[U1] / X[U1 - 1]:
            if is_negative:
                return -U2 * X[U1 - 1]
            else:
                return U2 * X[U1 - 1]
        elif P(U2 * X[U1 - 1])-Y[U1-1] > np.random.uniform() * (Y[U1]-Y[U1-1]):
            if is_negative:
                return -U2 * X[U1 - 1]
            else:
                return U2 * X[U1 - 1]
        else:
            return Gaussian()



znormal = np.array([0 for i in range(10000000)], dtype=np.longdouble)
for i in range(10000000):
     znormal[i] = Gaussian()


fig,axes= plt.subplots(figsize=(6,5))
sns.distplot(znormal,ax=axes)
# axes.set_title('Ziggurat Method')
axes.set_title('Ziggurat Method Tail')
axes.set_facecolor('#EBEBEB')
axes.grid(which='major', color='white', linewidth=1)
# plt.savefig('C:/Users/13862/Desktop/PDF_3_tail.png')
plt.show()

# my_data = norm.rvs(size=1000)
ks_statistic, p_value = kstest(znormal, 'norm')
print(ks_statistic, p_value)

# ax=plt.gca()
# bx = sns.distplot(znormal,ax=ax)
# legend = plt.legend()
#
#
# ax.set_facecolor('#EBEBEB')
# ax.grid(which='major', color='white', linewidth=1)
# ax.set_title('Ziggurat Method')
# plt.savefig('C:/Users/13862/Desktop/PDF_3.png')
# plt.show()


# ____________________________________________________________
# normal = np.random.randn(1000000)
# U1 = np.random.uniform(size = 1000000)
# U2 = np.random.uniform(size = 1000000)
# R = np.sqrt(-2 * np.log(U1))
# Theta = 2 * np.pi * U2
# X = R * np.cos(Theta)
# Y = R * np.sin(Theta)
# fig,axes= plt.subplots(1,3, sharex=True, figsize=(18,5))
# sns.distplot(normal,ax=axes[0])
# axes[0].set_title('Normal Distribution')
# sns.distplot(X,ax=axes[1])
# axes[1].set_title('Box-Muller Algorithm')
# sns.distplot(znormal,ax=axes[2])
# axes[2].set_title('Ziggurat Method')
# axes[0].set_facecolor('#EBEBEB')
# axes[1].set_facecolor('#EBEBEB')
# axes[2].set_facecolor('#EBEBEB')
# axes[0].grid(which='major', color='white', linewidth=1)
# axes[1].grid(which='major', color='white', linewidth=1)
# axes[2].grid(which='major', color='white', linewidth=1)
# # plt.savefig('C:/Users/13862/Desktop/PDF_3.png')
# plt.show()

# x = np.linspace(0, X[0], 1000)
# plot(x, P(x))
# ax=plt.gca()
# ax.set_facecolor('#EBEBEB')
# ax.grid(which='major', color='white', linewidth=1)
# plt.show()